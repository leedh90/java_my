<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product">
<!-- CRUD 4가지 만들기 -->
<!-- product.메서드명 으로 mybatis를 사용할 수 있다. -->
<!-- root-context.xml의 지정된 경로로 처리해준다. -->
	<insert id="insert" parameterType="productVO">
	<!-- ProductDAO에서 id가 insert인 기능을 찾을때 아래 SQL문을 실행하여 DB에 data 저장 -->
		insert into PRODUCT values ((select nvl(max(pnum),1)+1 from product),
		#{pname}, #{ptype},	#{ctype}, #{price}, #{address}, #{contact}, #{floor},
		#{rsize}, #{room}, #{total}, #{placetype}, #{roomimg}, #{pinfo}, #{dstatue},
		#{address2})
		<!-- 첫번째 컬럼인 pnum은 max값에 1씩 더해서 입력이 되게 자동채번 설정 다른 컬럼들은 입력값을 통해 입력 -->
	</insert>	
	
	<select id="select" parameterType="productVO" resultType="productVO">
	<!-- ProductDAO에서 id가 select인 기능을 찾을때 아래 SQL문을 실행하여 DB에서 data 리턴 -->
		select * from PRODUCT where contact = #{contact} order by pnum
		<!-- select문으로 contact 조건에  맞는 모든 컬럼값을 가져온다.(pnum기준으로 오름차순 정렬)-->
		<!-- order by는 오름차순이 default 값으로 생략하면 오름차순 정렬 -->
		<!-- contact가 동일한 data가 많기 때문에 * 사용시 모든 data를 리턴해온다.. -->
		<!-- 리턴하는 row data의 형태는 productVO라서 resultType을 꼭 지정해줘야함. -->
		<!-- select sql문은 반듯이 resultType가 필요하다. -->
	</select>

	<select id="all" parameterType="productVO" resultType="productVO">
	<!-- ProductDAO에서 id가 all인 기능을 찾을때 아래 SQL문을 실행하여 DB에서 data 리턴 -->
		select * from PRODUCT order by pnum
		<!-- ProductDAO에서 all 맵퍼로 연결할때 조건 없이 모든 row data를 리턴해준다.(오름차순 정렬) -->
		<!-- 리턴하는 row data의 형태는 productVO라서 resultType을 꼭 지정해줘야함. -->
		<!-- 모든 상품을 볼 수 있는 관리자 번호일 때만 요청하는 mapper 기능이다. -->
	</select>
	
	<select id="detail" parameterType="productVO" resultType="productVO">
	<!-- ProductDAO에서 id가 detail인 기능을 찾을때 아래 SQL문을 실행하여 DB에서 data 리턴 -->
		select * from PRODUCT where pnum = #{pnum}
		<!-- ProductDAO에서 detail 맵퍼로 연결할때 조건에 맞는 모든 row data를 리턴해준다. -->
		<!-- 리턴하는 row data의 형태는 productVO라서 resultType을 꼭 지정해줘야함. -->
	</select>
	
	<update id="update" parameterType="productVO">
	<!-- ProductDAO에서 id가 update인 기능을 찾을때 아래 SQL문을 실행하여 DB의 data를 수정한다. -->
		update PRODUCT set pname = #{pname}, ptype = #{ptype}, ctype = #{ctype},
		price = #{price}, address = #{address}, contact = #{contact}, floor = #{floor},
		rsize = #{rsize}, room = #{room}, total = #{total}, placetype = #{placetype},
		roomimg = #{roomimg}, pinfo = #{pinfo}, dstatue = #{dstatue}, address2 = #{address2}
		where pnum = #{pnum}
		<!-- pnum을 조건으로 해당 row에 있는 모든 컬럼을 수정할때 사용하는 sql문 -->
		<!-- select sql문이 아니라서 리턴타입이 없다. -->
	</update>
	
	<delete id="delete" parameterType="productVO">
	<!-- ProductDAO에서 id가 delete 기능을 찾을때 아래 SQL문을 실행하여 DB에서 data 삭제-->
		delete from PRODUCT where pnum = #{pnum}
		<!-- pnum을 조건으로 row data를 삭제하는 sql문 -->
	</delete>
</mapper>
